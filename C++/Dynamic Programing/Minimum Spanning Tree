#include <bits/stdc++.h>
using namespace std;

#define F 5

int minKey(int key[], bool mstSet[])
{
	int min = INT_MAX, min_index;

	for (int v = 0; v < F; v++)
		if (mstSet[v] == false && key[v] < min)
			min = key[v], min_index = v;

	return min_index;
}

void print(int parent[], int graph[F][F])
{
	cout<<"Edge \tWeight\n";
	for (int i = 1; i < F; i++)
		cout<<parent[i]<<" - "<<i<<" \t"<<graph[i][parent[i]]<<" \n";
}

void primMST(int graph[F][F])
{
	int parent[F];
	int key[F];
	bool mstSet[F];
	for (int i = 0; i < F; i++)
		key[i] = INT_MAX, mstSet[i] = false;
	key[0] = 0;
	parent[0] = -1; 

	for (int count = 0; count < F - 1; count++)
	{
		int u = minKey(key, mstSet);
		mstSet[u] = true;
		for (int v = 0; v < F; v++)
			if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v])
				parent[v] = u, key[v] = graph[u][v];
	}
	print(parent, graph);
}

int main()
{
	int graph[F][F] = { { 0, 3, 0, 6, 0 },
						{ 3, 0, 4, 9, 6 },
						{ 0, 4, 0, 0, 8 },
						{ 7, 9, 0, 0, 1 },
						{ 0, 6, 8, 1, 0 } };

	primMST(graph);

	return 0;
}
